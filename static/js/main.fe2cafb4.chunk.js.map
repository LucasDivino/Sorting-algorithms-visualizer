{"version":3,"sources":["SortingAlgotithms/heapsort.js","SortingAlgotithms/mergesort.js","SortingAlgotithms/quicksort.js","components/SortingVisualizer/index.js","SortingAlgotithms/bubblesort.js","components/App/index.js","index.js"],"names":["arrayLength","mergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","startIndex","endIndex","middleIndex","Math","floor","animation","k","i","j","operation","positions","push","doMerge","swap","leftIndex","rightIndex","temp","quickSort","left","right","index","pivot","partition","heapRoot","max","heapSortAnimations","heapSort","PRIMARY_COLOR","SECONDARY_COLOR","withStyles","arrayConatainer","display","justifyContent","marginLeft","marginRight","marginTop","arrayElement","direction","backgroundColor","width","buttonsBar","margin","buttonSpacing","withTheme","props","classes","speed","useState","isRunning","setIsRunning","animate","arrayBars","document","getElementsByClassName","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","newHeight","height","Box","className","map","value","key","Button","disabled","variant","color","onClick","getMergeSortAnimations","swapped","tmp","getBubbleSortAnimations","getQuickSortAnimations","getHeapSortAnimations","personalizedAppBar","state","arraySize","this","resetArray","prop","setState","newArray","randomInt","min","random","AppBar","position","appBarColor","Container","maxWidth","Toolbar","Typography","align","title","sliderBox","sliderText","Slider","slider","onChange","e","handleSliderChange","defaultValue","buttonReset","SortingVisualizer","React","Component","theme","breakpoints","down","paddingBottom","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","App","getElementById"],"mappings":"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","file":"static/js/main.fe2cafb4.chunk.js","sourcesContent":["let arrayLength;\r\n\r\nfunction swap(array, leftIndex, rightIndex, animations) {\r\n  let animation = {\r\n    operation: 'swap',\r\n    positions: [leftIndex, array[rightIndex]]\r\n  };\r\n  animations.push(animation);\r\n  animation = {\r\n    operation: 'swap',\r\n    positions: [rightIndex, array[leftIndex]]\r\n  };\r\n  animations.push(animation);\r\n  const temp = array[leftIndex];\r\n  array[leftIndex] = array[rightIndex];\r\n  array[rightIndex] = temp;\r\n}\r\n\r\nfunction heapRoot(array, i, animations) {\r\n  const left = 2 * i + 1;\r\n  const right = 2 * i + 2;\r\n  let animation;\r\n  let max = i;\r\n\r\n  if (left < arrayLength && array[left] > array[max]) {\r\n    max = left;\r\n  }\r\n\r\n  if (right < arrayLength && array[right] > array[max]) {\r\n    max = right;\r\n  }\r\n\r\n  if (max !== i) {\r\n    animation = {\r\n      operation: 'change-color',\r\n      positions: [i, max]\r\n    };\r\n    animations.push(animation);\r\n    animation = {\r\n      operation: 'revert-color',\r\n      positions: [i, max]\r\n    };\r\n    animations.push(animation);\r\n    swap(array, i, max, animations);\r\n    heapRoot(array, max, animations);\r\n  }\r\n}\r\n\r\nfunction heapSort(array, animations) {\r\n  arrayLength = array.length;\r\n  let i;\r\n\r\n  for (i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n    heapRoot(array, i, animations);\r\n  }\r\n\r\n  for (i = array.length - 1; i > 0; i--) {\r\n    swap(array, 0, i, animations);\r\n    arrayLength--;\r\n    heapRoot(array, 0, animations);\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport default function heapSortAnimations(array) {\r\n  const animations = [];\r\n  heapSort(array, animations);\r\n  return animations;\r\n}\r\n","function doMerge(array, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  let animation;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    // change color\r\n    animation = {\r\n      operation: 'change-color',\r\n      positions: [i, j]\r\n    };\r\n    animations.push(animation);\r\n    // revert color\r\n    animation = {\r\n      operation: 'revert-color',\r\n      positions: [i, j]\r\n    };\r\n    animations.push(animation);\r\n\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // rewrite value\r\n      animation = {\r\n        operation: 'swap',\r\n        positions: [k, auxiliaryArray[i]]\r\n      };\r\n      animations.push(animation);\r\n      array[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // rewrite value\r\n      animation = {\r\n        operation: 'swap',\r\n        positions: [k, auxiliaryArray[j]]\r\n      };\r\n      animations.push(animation);\r\n      array[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    // change color\r\n    animation = {\r\n      operation: 'change-color',\r\n      positions: [i, i]\r\n    };\r\n    animations.push(animation);\r\n    // revert color\r\n    animation = {\r\n      operation: 'revert-color',\r\n      positions: [i, i]\r\n    };\r\n    animations.push(animation);\r\n    // rewrite value\r\n    animation = {\r\n      operation: 'swap',\r\n      positions: [k, auxiliaryArray[i]]\r\n    };\r\n    animations.push(animation);\r\n    array[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    // change color\r\n    animation = {\r\n      operation: 'change-color',\r\n      positions: [j, j]\r\n    };\r\n    animations.push(animation);\r\n    // revert color\r\n    animation = {\r\n      operation: 'revert-color',\r\n      positions: [j, j]\r\n    };\r\n    animations.push(animation);\r\n    // rewrite value;\r\n    animation = {\r\n      operation: 'swap',\r\n      positions: [k, auxiliaryArray[j]]\r\n    };\r\n    animations.push(animation);\r\n    array[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nfunction mergeSortHelper(array, startIndex, endIndex, auxiliaryArray, animations) {\r\n  if (startIndex === endIndex) return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, array, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, array, animations);\r\n  doMerge(array, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nexport default function mergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n","function swap(array, leftIndex, rightIndex, animations) {\r\n  let animation = {\r\n    operation: 'swap',\r\n    positions: [leftIndex, array[rightIndex]]\r\n  };\r\n  animations.push(animation);\r\n  animation = {\r\n    operation: 'swap',\r\n    positions: [rightIndex, array[leftIndex]]\r\n  };\r\n  animations.push(animation);\r\n  const temp = array[leftIndex];\r\n  array[leftIndex] = array[rightIndex];\r\n  array[rightIndex] = temp;\r\n}\r\nfunction partition(array, left, right, animations) {\r\n  const pivot = array[Math.floor((right + left) / 2)];\r\n  let animation;\r\n  let i = left;\r\n  let j = right;\r\n  while (i <= j) {\r\n    while (array[i] < pivot) {\r\n      animation = {\r\n        operation: 'change-color',\r\n        positions: [i, Math.floor((right + left) / 2)]\r\n      };\r\n      animations.push(animation);\r\n      animation = {\r\n        operation: 'revert-color',\r\n        positions: [i, Math.floor((right + left) / 2)]\r\n      };\r\n      animations.push(animation);\r\n      i++;\r\n    }\r\n    while (array[j] > pivot) {\r\n      animation = {\r\n        operation: 'change-color',\r\n        positions: [j, Math.floor((right + left) / 2)]\r\n      };\r\n      animations.push(animation);\r\n      animation = {\r\n        operation: 'revert-color',\r\n        positions: [j, Math.floor((right + left) / 2)]\r\n      };\r\n      animations.push(animation);\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(array, i, j, animations);\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction quickSort(array, left, right, animations) {\r\n  let index;\r\n  if (array.length > 1) {\r\n    index = partition(array, left, right, animations);\r\n    if (left < index - 1) {\r\n      quickSort(array, left, index - 1, animations);\r\n    }\r\n    if (index < right) {\r\n      quickSort(array, index, right, animations);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport default function quickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { withStyles } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport getMergeSortAnimations from '../../SortingAlgotithms/mergesort';\r\nimport getBubbleSortAnimations from '../../SortingAlgotithms/bubblesort';\r\nimport getQuickSortAnimations from '../../SortingAlgotithms/quicksort';\r\nimport getHeapSortAnimations from '../../SortingAlgotithms/heapsort';\r\n\r\nconst PRIMARY_COLOR = '#408050';\r\n\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst styles = () => ({\r\n  arrayConatainer: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginLeft: 30,\r\n    marginRight: 30,\r\n    marginTop: 10\r\n  },\r\n  arrayElement: {\r\n    display: 'inline-flex',\r\n    direction: 'colunm',\r\n    marginRight: 2,\r\n    backgroundColor: PRIMARY_COLOR,\r\n    width: 100\r\n  },\r\n  buttonsBar: {\r\n    margin: 30,\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  buttonSpacing: {\r\n    marginRight: 40\r\n  }\r\n});\r\n\r\nfunction SortingVizualizer(props) {\r\n  const { classes } = props;\r\n  const { speed } = props;\r\n  const { array } = props;\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  function animate(animations) {\r\n    setIsRunning(true);\r\n    for (let i = 0; i < animations.length; i += 1) {\r\n      const arrayBars = document.getElementsByClassName(classes.arrayElement);\r\n      if (animations[i].operation === 'change-color') {\r\n        const [barOneIndex, barTwoIndex] = animations[i].positions;\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n        }, i * speed);\r\n      }\r\n      if (animations[i].operation === 'revert-color') {\r\n        const [barOneIndex, barTwoIndex] = animations[i].positions;\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, i * speed);\r\n      }\r\n      if (animations[i].operation === 'swap') {\r\n        setTimeout(() => {\r\n          const [barOneIndex, newHeight] = animations[i].positions;\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          barOneStyle.height = `${newHeight / 1.4}px`;\r\n        }, i * speed);\r\n      }\r\n    }\r\n    setIsRunning(false);\r\n  }\r\n\r\n  function AnimateMergesort() {\r\n    const animations = getMergeSortAnimations(array);\r\n    animate(animations);\r\n  }\r\n\r\n  function AnimateBubbleSort() {\r\n    const animations = getBubbleSortAnimations(array);\r\n    animate(animations);\r\n  }\r\n\r\n  function AnimateQuickSort() {\r\n    const animations = getQuickSortAnimations(array);\r\n    animate(animations);\r\n  }\r\n\r\n  function AnimateHeapSort() {\r\n    const animations = getHeapSortAnimations(array);\r\n    animate(animations);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.arrayConatainer}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.arrayElement}\r\n            style={{ height: `${value / 1.4}px` }}\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            key={index}\r\n          />\r\n        ))}\r\n      </Box>\r\n      <Box className={classes.buttonsBar}>\r\n        <Button\r\n          disabled={isRunning}\r\n          className={classes.buttonSpacing}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={AnimateMergesort}\r\n        >\r\n          MergeSort\r\n        </Button>\r\n        <Button\r\n          disabled={isRunning}\r\n          variant=\"contained\"\r\n          className={classes.buttonSpacing}\r\n          color=\"primary\"\r\n          onClick={AnimateBubbleSort}\r\n        >\r\n          BubbleSort\r\n        </Button>\r\n        <Button\r\n          disabled={isRunning}\r\n          className={classes.buttonSpacing}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={AnimateQuickSort}\r\n        >\r\n          quicksort\r\n        </Button>\r\n\r\n        <Button\r\n          disabled={isRunning}\r\n          className={classes.buttonSpacing}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={AnimateHeapSort}\r\n        >\r\n          heapsort\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(SortingVizualizer);\r\n","export default function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n  let swapped;\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n      // change color\r\n      let animation = {\r\n        operation: 'change-color',\r\n        positions: [i, i + 1]\r\n      };\r\n      animations.push(animation);\r\n      // swap\r\n      if (array[i] > array[i + 1]) {\r\n        animation = {\r\n          operation: 'swap',\r\n          positions: [i, array[i + 1]]\r\n        };\r\n        animations.push(animation);\r\n        animation = {\r\n          operation: 'swap',\r\n          positions: [i + 1, array[i]]\r\n        };\r\n        animations.push(animation);\r\n        const tmp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = tmp;\r\n        swapped = true;\r\n      }\r\n\r\n      // revert color\r\n      animation = {\r\n        operation: 'revert-color',\r\n        positions: [i, i + 1]\r\n      };\r\n      animations.push(animation);\r\n    }\r\n  } while (swapped);\r\n  return animations;\r\n}\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport SortingVisualizer from '../SortingVisualizer';\r\n\r\nconst styles = theme => ({\r\n  appBarColor: {\r\n    backgroundColor: '#408050'\r\n  },\r\n  title: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    [theme.breakpoints.down('md')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  sliderBox: {\r\n    width: 100,\r\n    marginLeft: 40,\r\n    marginTop: 15\r\n  },\r\n  sliderText: {\r\n    position: 'absolute',\r\n    paddingBottom: 10\r\n  },\r\n  slider: {\r\n    marginTop: 20\r\n  },\r\n  buttonReset: {\r\n    marginLeft: 40\r\n  }\r\n});\r\n\r\nclass personalizedAppBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      speed: 1,\r\n      arraySize: 250,\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  handleSliderChange(value, prop) {\r\n    if (prop === 'speed') {\r\n      value = 100 - value;\r\n    }\r\n    this.setState({ [prop]: value });\r\n  }\r\n\r\n  resetArray() {\r\n    const newArray = [];\r\n    for (let i = 0; i < this.state.arraySize; i += 1) {\r\n      newArray.push(this.randomInt(10, 1000));\r\n    }\r\n    this.setState({ array: newArray });\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <AppBar position=\"static\" className={classes.appBarColor}>\r\n          <Container maxWidth=\"lg\">\r\n            <Toolbar>\r\n              <Typography align=\"center\" color=\"secondary\" variant=\"h5\" className={classes.title}>\r\n                Sorting Visualizer\r\n              </Typography>\r\n              <Box className={classes.sliderBox}>\r\n                <Typography className={classes.sliderText}>Array Size</Typography>\r\n                <Slider\r\n                  min={4}\r\n                  className={classes.slider}\r\n                  onChange={(e, value) => this.handleSliderChange(value, 'arraySize')}\r\n                  max={250}\r\n                  color=\"secondary\"\r\n                  defaultValue={250}\r\n                />\r\n              </Box>\r\n              <Box className={classes.sliderBox}>\r\n                <Typography className={classes.sliderText}>Animation Speed</Typography>\r\n                <Slider\r\n                  onChange={(e, value) => this.handleSliderChange(value, 'speed')}\r\n                  className={classes.slider}\r\n                  max={100}\r\n                  color=\"secondary\"\r\n                  defaultValue={100}\r\n                />\r\n              </Box>\r\n              <Button\r\n                className={classes.buttonReset}\r\n                onClick={() => this.resetArray()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                reset\r\n              </Button>\r\n            </Toolbar>\r\n          </Container>\r\n        </AppBar>\r\n        <SortingVisualizer array={this.state.array} speed={this.state.speed} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(personalizedAppBar);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport App from './components/App';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#408050'\n    },\n    secondary: {\n      main: '#fff'\n    }\n  }\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}