{"version":3,"sources":["SortingAlgotithms/heapsort.js","Store/Ducks/animationRunning.js","SortingAlgotithms/helpers.js","SortingAlgotithms/mergesort.js","SortingAlgotithms/quicksort.js","components/SortingVisualizer/index.js","SortingAlgotithms/bubblesort.js","components/App/index.js","Store/Ducks/index.js","Store/index.js","index.js"],"names":["arrayLength","createActions","setIsRunning","Types","Creators","createReducer","SET_IS_RUNNING","action","isRunning","addSwap","animations","pos","animation","operation","positions","push","addChange","addRevert","mergeSortHelper","array","startIndex","endIndex","auxiliaryArray","middleIndex","Math","floor","k","i","j","doMerge","swap","leftIndex","rightIndex","temp","quickSort","left","right","index","length","pivot","partition","heapRoot","max","heapSortAnimations","heapSort","PRIMARY_COLOR","SECONDARY_COLOR","withStyles","arrayConatainer","display","justifyContent","marginLeft","marginRight","marginTop","arrayElement","direction","backgroundColor","width","buttonsBar","margin","buttonSpacing","withTheme","connect","state","animationRunning","dispatch","bindActionCreators","actions","props","classes","speed","delay","ms","Promise","resolve","setTimeout","animate","a","async","promises","map","element","arrayBars","document","getElementsByClassName","then","barOneIndex","barTwoIndex","style","height","all","Box","className","value","key","Button","disabled","variant","color","onClick","slice","getMergeSortAnimations","swapped","tmp","getBubbleSortAnimations","getQuickSortAnimations","getHeapSortAnimations","setMax","screenSize","window","innerWidth","App","arraySize","arrayMax","this","resetArray","prop","setState","newArray","randomInt","min","random","AppBar","position","appBarColor","Toolbar","Typography","align","title","sliderBox","sliderText","Slider","slider","onChange","e","handleSliderChange","defaultValue","buttonReset","React","Component","theme","breakpoints","down","paddingBottom","combineReducers","store","createStore","Reducers","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","Store","getElementById"],"mappings":"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","file":"static/js/main.ff0870ca.chunk.js","sourcesContent":["import { addChange, addSwap, addRevert } from './helpers';\r\n\r\nlet arrayLength;\r\n\r\nfunction swap(array, leftIndex, rightIndex, animations) {\r\n  addSwap(animations, [leftIndex, array[rightIndex]]);\r\n  addSwap(animations, [rightIndex, array[leftIndex]]);\r\n  const temp = array[leftIndex];\r\n  array[leftIndex] = array[rightIndex];\r\n  array[rightIndex] = temp;\r\n}\r\n\r\nfunction heapRoot(array, i, animations) {\r\n  const left = 2 * i + 1;\r\n  const right = 2 * i + 2;\r\n  let max = i;\r\n\r\n  if (left < arrayLength && array[left] > array[max]) {\r\n    max = left;\r\n  }\r\n\r\n  if (right < arrayLength && array[right] > array[max]) {\r\n    max = right;\r\n  }\r\n\r\n  if (max !== i) {\r\n    addChange(animations, [i, max]);\r\n    addRevert(animations, [i, max]);\r\n    swap(array, i, max, animations);\r\n    heapRoot(array, max, animations);\r\n  }\r\n}\r\n\r\nfunction heapSort(array, animations) {\r\n  arrayLength = array.length;\r\n  let i;\r\n\r\n  for (i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n    heapRoot(array, i, animations);\r\n  }\r\n\r\n  for (i = array.length - 1; i > 0; i--) {\r\n    swap(array, 0, i, animations);\r\n    arrayLength--;\r\n    heapRoot(array, 0, animations);\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport default function heapSortAnimations(array) {\r\n  const animations = [];\r\n  heapSort(array, animations);\r\n  return animations;\r\n}\r\n","import { createActions, createReducer } from 'reduxsauce';\r\n\r\nexport const { Types, Creators } = createActions({\r\n  setIsRunning: ['isRunning']\r\n});\r\n\r\nconst INITIAL_STATE = false;\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst set = (_state = INITIAL_STATE, action) => action.isRunning;\r\n\r\nexport default createReducer(INITIAL_STATE, {\r\n  [Types.SET_IS_RUNNING]: set\r\n});\r\n","export function addSwap(animations, pos) {\r\n  const animation = {\r\n    operation: 'swap',\r\n    positions: pos\r\n  };\r\n  animations.push(animation);\r\n}\r\n\r\nexport function addChange(animations, pos) {\r\n  const animation = {\r\n    operation: 'change-color',\r\n    positions: pos\r\n  };\r\n  animations.push(animation);\r\n}\r\n\r\nexport function addRevert(animations, pos) {\r\n  const animation = {\r\n    operation: 'revert-color',\r\n    positions: pos\r\n  };\r\n  animations.push(animation);\r\n}\r\n","import { addChange, addSwap, addRevert } from './helpers';\r\n\r\nfunction doMerge(array, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    // change color\r\n    addChange(animations, [i, j]);\r\n    // revert color\r\n    addRevert(animations, [i, j]);\r\n    addSwap(animations, [k, auxiliaryArray[i]]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      addSwap(animations, [k, auxiliaryArray[i]]);\r\n      array[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // rewrite value\r\n      addSwap(animations, [k, auxiliaryArray[j]]);\r\n      array[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    // change color\r\n    addChange(animations, [i, i]);\r\n    // revert color\r\n    addRevert(animations, [i, i]);\r\n    // rewrite value\r\n    addSwap(animations, [k, auxiliaryArray[i]]);\r\n    array[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    // change color\r\n    addChange(animations, [j, j]);\r\n    // revert color\r\n    addRevert(animations, [j, j]);\r\n    // rewrite value;\r\n    addSwap(animations, [k, auxiliaryArray[j]]);\r\n    array[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nfunction mergeSortHelper(array, startIndex, endIndex, auxiliaryArray, animations) {\r\n  if (startIndex === endIndex) return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, array, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, array, animations);\r\n  doMerge(array, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nexport default function mergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n","import { addChange, addSwap, addRevert } from './helpers';\r\n\r\nfunction swap(array, leftIndex, rightIndex, animations) {\r\n  addSwap(animations, [leftIndex, array[rightIndex]]);\r\n  addSwap(animations, [rightIndex, array[leftIndex]]);\r\n  const temp = array[leftIndex];\r\n  array[leftIndex] = array[rightIndex];\r\n  array[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(array, left, right, animations) {\r\n  const pivot = array[Math.floor((right + left) / 2)];\r\n  let i = left;\r\n  let j = right;\r\n  while (i <= j) {\r\n    while (array[i] < pivot) {\r\n      addChange(animations, [i, Math.floor((right + left) / 2)]);\r\n      addRevert(animations, [i, Math.floor((right + left) / 2)]);\r\n      i++;\r\n    }\r\n    while (array[j] > pivot) {\r\n      addChange(animations, [j, Math.floor((right + left) / 2)]);\r\n      addRevert(animations, [j, Math.floor((right + left) / 2)]);\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(array, i, j, animations);\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction quickSort(array, left, right, animations) {\r\n  let index;\r\n  if (array.length > 1) {\r\n    index = partition(array, left, right, animations);\r\n    if (left < index - 1) {\r\n      quickSort(array, left, index - 1, animations);\r\n    }\r\n    if (index < right) {\r\n      quickSort(array, index, right, animations);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport default function quickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n// redux\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Creators as actions } from '../../Store/Ducks/animationRunning';\r\n// sorting algorithms\r\nimport getMergeSortAnimations from '../../SortingAlgotithms/mergesort';\r\nimport getBubbleSortAnimations from '../../SortingAlgotithms/bubblesort';\r\nimport getQuickSortAnimations from '../../SortingAlgotithms/quicksort';\r\nimport getHeapSortAnimations from '../../SortingAlgotithms/heapsort';\r\n\r\nconst PRIMARY_COLOR = '#408050';\r\n\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst styles = () => ({\r\n  arrayConatainer: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginLeft: 30,\r\n    marginRight: 30,\r\n    marginTop: 10\r\n  },\r\n  arrayElement: {\r\n    display: 'inline-flex',\r\n    direction: 'colunm',\r\n    marginRight: 2,\r\n    backgroundColor: PRIMARY_COLOR,\r\n    width: 100\r\n  },\r\n  buttonsBar: {\r\n    margin: 30,\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  buttonSpacing: {\r\n    marginRight: 40\r\n  }\r\n});\r\n\r\nfunction SortingVisualizer(props) {\r\n  const { classes } = props;\r\n  const { speed } = props;\r\n  const { array } = props;\r\n\r\n  function delay(ms) {\r\n    return new Promise(resolve => {\r\n      setTimeout(resolve, ms);\r\n    });\r\n  }\r\n\r\n  async function animate(animations) {\r\n    props.setIsRunning(true);\r\n    const promises = animations.map(async (element, index) => {\r\n      const arrayBars = document.getElementsByClassName(classes.arrayElement);\r\n      return delay(index * speed).then(() => {\r\n        const [barOneIndex, barTwoIndex] = element.positions;\r\n        switch (element.operation) {\r\n          case 'change-color':\r\n            arrayBars[barOneIndex].style.backgroundColor = SECONDARY_COLOR;\r\n            arrayBars[barTwoIndex].style.backgroundColor = SECONDARY_COLOR;\r\n            break;\r\n          case 'revert-color':\r\n            arrayBars[barOneIndex].style.backgroundColor = PRIMARY_COLOR;\r\n            arrayBars[barTwoIndex].style.backgroundColor = PRIMARY_COLOR;\r\n            break;\r\n          case 'swap':\r\n            arrayBars[barOneIndex].style.height = `${barTwoIndex / 1.4}px`;\r\n            break;\r\n          default:\r\n        }\r\n      });\r\n    });\r\n    await Promise.all(promises);\r\n    props.setIsRunning(false);\r\n  }\r\n\r\n  function AnimateMergesort() {\r\n    const arrayCopy = [...array];\r\n    const animations = getMergeSortAnimations(arrayCopy);\r\n    animate(animations);\r\n  }\r\n\r\n  function AnimateBubbleSort() {\r\n    const arrayCopy = [...array];\r\n    const animations = getBubbleSortAnimations(arrayCopy);\r\n    animate(animations);\r\n  }\r\n\r\n  function AnimateQuickSort() {\r\n    const arrayCopy = [...array];\r\n    const animations = getQuickSortAnimations(arrayCopy);\r\n    animate(animations);\r\n  }\r\n\r\n  function AnimateHeapSort() {\r\n    const arrayCopy = [...array];\r\n    const animations = getHeapSortAnimations(arrayCopy);\r\n    animate(animations);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.arrayConatainer}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.arrayElement}\r\n            style={{ height: `${value / 1.4}px` }}\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            key={index}\r\n          />\r\n        ))}\r\n      </Box>\r\n      <Box className={classes.buttonsBar}>\r\n        <Button\r\n          disabled={props.isRunning}\r\n          className={classes.buttonSpacing}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={AnimateMergesort}\r\n        >\r\n          MergeSort\r\n        </Button>\r\n        <Button\r\n          disabled={props.isRunning}\r\n          variant=\"contained\"\r\n          className={classes.buttonSpacing}\r\n          color=\"primary\"\r\n          onClick={AnimateBubbleSort}\r\n        >\r\n          BubbleSort\r\n        </Button>\r\n        <Button\r\n          disabled={props.isRunning}\r\n          className={classes.buttonSpacing}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={AnimateQuickSort}\r\n        >\r\n          quicksort\r\n        </Button>\r\n\r\n        <Button\r\n          disabled={props.isRunning}\r\n          className={classes.buttonSpacing}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={AnimateHeapSort}\r\n        >\r\n          heapsort\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateTopProps = state => ({\r\n  isRunning: state.animationRunning\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\r\n\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateTopProps, mapDispatchToProps)(SortingVisualizer)\r\n);\r\n","import { addChange, addSwap, addRevert } from './helpers';\r\n\r\nexport default function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n  let swapped;\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n      // change color\r\n      addChange(animations, [i, i + 1]);\r\n      if (array[i] > array[i + 1]) {\r\n        // swap\r\n        addSwap(animations, [i, array[i + 1]]);\r\n        addSwap(animations, [i + 1, array[i]]);\r\n        const tmp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = tmp;\r\n        swapped = true;\r\n      }\r\n      // revert color\r\n      addRevert(animations, [i, i + 1]);\r\n    }\r\n  } while (swapped);\r\n  return animations;\r\n}\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n// redux\r\nimport { connect } from 'react-redux';\r\n// assets\r\nimport SortingVisualizer from '../SortingVisualizer';\r\n\r\nconst styles = theme => ({\r\n  appBarColor: {\r\n    backgroundColor: '#408050'\r\n  },\r\n  title: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    [theme.breakpoints.down('md')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  sliderBox: {\r\n    width: 100,\r\n    marginLeft: 40,\r\n    marginTop: 15\r\n  },\r\n  sliderText: {\r\n    position: 'absolute',\r\n    paddingBottom: 10\r\n  },\r\n  slider: {\r\n    marginTop: 20\r\n  },\r\n  buttonReset: {\r\n    marginLeft: 40\r\n  }\r\n});\r\n\r\nfunction setMax() {\r\n  const screenSize = window.innerWidth;\r\n  switch (true) {\r\n    case screenSize > 1000:\r\n      return 250;\r\n    case screenSize < 1000 && screenSize > 700:\r\n      return 150;\r\n    case screenSize < 700 && screenSize > 400:\r\n      return 100;\r\n    case screenSize < 400:\r\n      return 50;\r\n    default:\r\n      return 250;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      speed: 1,\r\n      arraySize: setMax(),\r\n      array: [],\r\n      arrayMax: setMax()\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  handleSliderChange(value, prop) {\r\n    if (prop === 'speed') {\r\n      value = 30 - value;\r\n    }\r\n    this.setState({ [prop]: value });\r\n  }\r\n\r\n  resetArray() {\r\n    const newArray = [];\r\n    for (let i = 0; i < this.state.arraySize; i += 1) {\r\n      newArray.push(this.randomInt(10, 1000));\r\n    }\r\n    this.setState({ array: newArray });\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <AppBar position=\"static\" className={classes.appBarColor}>\r\n          <Toolbar>\r\n            <Typography align=\"center\" color=\"secondary\" variant=\"h5\" className={classes.title}>\r\n              Sorting Visualizer\r\n            </Typography>\r\n            <Box className={classes.sliderBox}>\r\n              <Typography className={classes.sliderText}>Array Size</Typography>\r\n              <Slider\r\n                min={4}\r\n                className={classes.slider}\r\n                onChange={(e, value) => this.handleSliderChange(value, 'arraySize')}\r\n                max={this.state.arrayMax}\r\n                color=\"secondary\"\r\n                defaultValue={this.state.arrayMax}\r\n              />\r\n            </Box>\r\n            <Box className={classes.sliderBox}>\r\n              <Typography className={classes.sliderText}>Animation Speed</Typography>\r\n              <Slider\r\n                onChange={(e, value) => this.handleSliderChange(value, 'speed')}\r\n                className={classes.slider}\r\n                max={30}\r\n                color=\"secondary\"\r\n                defaultValue={30}\r\n              />\r\n            </Box>\r\n            <Button\r\n              className={classes.buttonReset}\r\n              onClick={() => this.resetArray()}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              disabled={this.props.isRunning}\r\n            >\r\n              reset\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <SortingVisualizer array={this.state.array} speed={this.state.speed} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateTopProps = state => ({\r\n  isRunning: state.animationRunning\r\n});\r\n\r\nexport default withStyles(styles, { withTheme: true })(connect(mapStateTopProps)(App));\r\n","import { combineReducers } from 'redux';\r\n\r\nimport animationRunning from './animationRunning';\r\n\r\nexport default combineReducers({\r\n  animationRunning\r\n});\r\n","import { createStore } from 'redux';\r\nimport Reducers from './Ducks';\r\n\r\nconst store = createStore(Reducers);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport Store from './Store';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#408050'\n    },\n    secondary: {\n      main: '#fff'\n    }\n  }\n});\n\nReactDOM.render(\n  <Provider store={Store}>\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}